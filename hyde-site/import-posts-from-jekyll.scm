#!/bin/bash
#| run a script on UNIX systems
exec csi -s "$0" "$@"
|#

(require-extension irregex regex)
(use posix pathname-expand)

(define src-dir "~/git/homepage/_posts/")
(define out-dir "~/Dropbox/kobapan/work/scheme/Chicken/hyde-site/src/blog/")
(define (src #!optional (file "")) (string-append (pathname-expand src-dir) file))
(define (out #!optional (file "")) (string-append (pathname-expand out-dir) file))
(define ($ m i) (irregex-replace/all "\"" (string-trim-both (irregex-match-substring m i))))

(map (lambda (file)
       (if (irregex-match ".+\\.md$" file)
           (begin
             (delete-file* (out file))
             (with-output-to-file (out file)
               (lambda ()
                 (with-input-from-file (src file)
                   (lambda ()
                     (let loop ((header (make-parameter #f)) (prev ""))
                       (let ((line (read-line)))
                         (unless (eof-object? line)
                             (let ((m (irregex-match "(tag|title|toc):[ ]?(.*)$" line)))
                               (cond ((and (equal? "---" (string-trim-both line)) (not header))
                                      (header #t)
                                      (display "("))
                                     ((and m (equal? ($ m 1) "title"))
                                      (print "(title . \"" ($ m 2) "\")"))
                                     ((and m (equal? ($ m 1) "tag"))
                                      (print "(tags " ($ m 2) ")"))
                                     ((and m (equal? ($ m 1) "toc"))
                                      (print "(toc . #t)"))
                                     ((and (equal? "---" (string-trim-both line)) header)
                                      (header #f)
                                      (print ")"))
                                     ((or (and (<= 2 (string-length line)) (equal? "##" (substring line 0 2)))
                                          (and (<= 1 (string-length line)) (equal? ">" (substring line 0 1)))
                                          (and (<= 6 (string-length line)) (equal? "<table" (substring line 0 6)))
                                          )
                                      (print (if (equal? prev "") "" "\n") (string-trim-both line (string->char-set " "))))
                                     ((and (<= 7 (string-length line)) (equal? "<iframe" (substring line 0 7)))
                                      (print "<div class=\"video-wrap\"><div class=\"video\">" line "</div></div>"))
                                     ((not (header))
                                      (print (string-substitute "([^<]*)(<s>)([^<]*)(</s>)(.*)" "\\1<small>\\3</small>\\5" line)))))
                             (loop header line)))))))))))
     (directory (src)))

